// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package cmd

import (
	"context"
	"github.com/google/wire"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitApplication(ctx context.Context) (*ApplicationContext, func(), error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	db, err := ProvidePostgres(config)
	if err != nil {
		return nil, nil, err
	}
	store := ProvideJobStore(db)
	client := ProvideRedis(config)
	connection, cleanup, err := ProvideRmqConnection(client)
	if err != nil {
		return nil, nil, err
	}
	queue, cleanup2, err := ProvideRedisQueue(connection)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	clock := ProvideClock()
	service := ProvideJobSvc(store, queue, clock)
	httpHandler := ProvideJobHandler(config, service)
	entry := ProvideLogger(config)
	random := ProvideRandom()
	transactioner := ProvideTransactioner(db)
	worker := ProvideJobWorker(config, entry, service, connection, queue, clock, random, transactioner)
	applicationContext := &ApplicationContext{
		ctx:        ctx,
		cfg:        config,
		jobStore:   store,
		jobSvc:     service,
		jobHandler: httpHandler,
		jobWorker:  worker,
	}
	return applicationContext, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var ApplicationSet = wire.NewSet(
	ProvideConfig,
	ProvideLogger,
	ProvideClock,
	ProvideRandom,
	ProvidePostgres,

	ProvideTransactioner,
	ProvideRedis,
	ProvideRmqConnection,
	ProvideRedisQueue,

	ProvideJobSvc,
	ProvideJobStore,
	ProvideJobHandler,
	ProvideJobWorker,
)
